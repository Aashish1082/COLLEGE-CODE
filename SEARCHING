#include<iostream>
using namespace std;
void print(int a[], int size)
{
    printf("\nARRAY ELEMENT:\n");
    for (int i = 0; i < size; i++)
    {
        printf(" %d ", a[i]);
    }
    printf("\n");
}
int initialization(int a[])
{
    int size;
    printf("\nENTER THE SIZE OF ARRAY:");
    scanf("%d", &size);
    printf("ENTER ELEMENTS:\n");
    for (int i = 0; i < size; i++)
    {
        scanf("%d", &a[i]);
    }
    return size;
}

int searching(int a[], int key, int n)
{
    int b[n], s = 0;
    for (int i = 0; i < n; i++)
    {
        if (a[i] == key)
        {
            b[s++] = i;
            
        }
    }
    if (s)
    {
        for (int j = 0; j < s; j++)
        {
            printf("\nFOUND ELEMENT AT [%d] INDEX", b[j]);
        }
    }
    else
    {
        printf("ELEMENT NOT FOUND");
    }
    return 0;
}
int binary_search(int a[],int x,int l, int h)
{
    if(l<=h)
    {
        int mid=(l+h)/2;
        if(x<a[mid])
        
            return binary_search(a,x,l,mid-1);
            else if(x>a[mid])
            return binary_search(a,x,mid+1,h);
            else if(x==a[mid])
            {
                return mid;
            }
        
    }
    return 0;
}

int ternary_search(int a[],int x,int h, int l)
{
    if(l>=h)
    {
    int mid1= l+(h-l)/3;
    int mid2= h-(h-l)/3;
    if(x==a[mid1])
    return mid1;
    else if(x==a[mid2])
    return mid2;
    else if(x<a[mid1])
    return ternary_search(a,x,mid1-1,l);
    else if(x>a[mid2])
    return ternary_search(a,x,h,mid2+1);
    else if(x<mid2 && x>mid1)
    return ternary_search(a,x,mid1-1,mid2+1);
    
    
    
    }
    return -1;
}
int interpolation_search(int a[],int l,int h,int key)
{
    int pos;

    if (key>=a[l] && key<=a[h] && l<=h)
    {
        pos = l + ( ((double)(h - l)*(key - a[l]) / (a[h] - a[l]))  );

        if (a[pos]==key)
        {
            return pos;
        }
        else if (key<a[pos])
        {
            return interpolation_search(a,l,pos-1,key);
        }
        else
        {
            return interpolation_search(a,pos+1,h,key);
        }
    }
    return -1;
}
int index_sequential_searching(int a[], int key, int size)
{
    int step=size/5,start,end;
    int i,j,ele_table[5],index=0,ind_table[5];
    for(i=0;i<size;i=i+step)
    {
        ele_table[index]=a[i];
        ind_table[index]=i;
        index++;
    }
    for(i=0;i<index;i++)
    {
        if (key == ele_table[i])
        {
            return ind_table[i];
        }
        else
        {
            if (key < ele_table[i] )
            {
                start=ind_table[i-1];
                end=ind_table[i];
                for(j=start;j<end;j++)
                {
                    if (key == a[j])
                    {
                        return j;
                    }
                }
                return -1;
            }
        }
    }
    for (i = ind_table[index - 1]; i < size; i++)
    {
        if (key == a[i])
        {
            return i;
        }
    }
    return -1;
}
int main()
{
    int a[5], size,key=5,index;
    size = initialization(a);
    print(a, size);

    searching(a, 5, size);
    cout<<endl;
    cout<<endl;
    int b[10]={10,20,50,55,65,70,75,80,90,100};
    int n,i,h,l,x;
    cout<<"Enter the element to be searched"<<endl;
    cin>>x;
    cout<<binary_search(b,x,0,9);
    cout<<endl;
    cout<<endl;
    cout<<"Enter the element to be searched"<<endl;
    cin>>x;
    int result= ternary_search(a,x,n-1,0);
    if(result==-1)
    cout<<"NO IS NOT FOUND"<<endl;
    else
    cout<<"NO is found at index"<<i;
    cout<<endl;
    cout<<endl;
    index = interpolation_search(a,0,size-1,key);
    if (index >= 0)
        printf("Number is at [%d] index", index);
    else
        printf("Number is not exist in the array");
    cout<<endl;
    cout<<endl;

    index = index_sequential_searching(a, key, size);
    if (index >= 0)
        printf("Number is at [%d] index", index);
    else
        printf("Number is not exist in the array");


    return 0;
}
