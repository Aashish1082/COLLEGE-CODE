/************************************************************************************************************/
//LAB1(array)
#include<iostream>
using namespace std;
int insertSorted(int arr[], int n, int key, int size)
{
    if (n >= size)
        return n;
 
    arr[n] = key;
 
    return (n + 1);
}
int findMissing(int arr[], int N)
{
    int i;
    int temp[N + 1];
    for(int i = 0; i <= N; i++){
      temp[i] = 0;
    }
   
    for(i = 0; i < N; i++){
      temp[arr[i] - 1] = 1;
    }
 
 
    int ans;
    for (i = 0; i <= N ; i++) {
        if (temp[i] == 0)
            ans = i  + 1;
    }

    cout << ans;

}

int count_element_in_array(int a[],int size)
{
    int count=0,ele,i,j,num[10],value=1;
	int r=1;
    num[0]=a[0];
    for (i=1;i<size;i++)
    {
        count =0;
        ele=a[i];
        for (j=0;j<r;j++)
        {
            if (ele==num[j])
            {
                break;
            }
        }
        if (j==r)
        {
            num[value++]=ele;
            r++;
        }
    }
    int flag=1;
    for ( i=0;i<r;i++)
    {
        count=0;
        ele=num[i];
        
        for( j=0;j<size;j++)
        {

            if (a[j]==ele)
            {
                count++;
            }
        }
        if (count>1) 
        {
            flag=0;
             printf("\nELEMENT:%d REPEATED COUNT:%d\n",ele,count) ;
        }
    }
    if(flag)
    {
        cout<<"NO ELEMENT IN THE ARRAY"<<endl;
    }
	return 0;
}
int main()
{
    int i,n;
    int a[10]={10,20,22,24,28,29,30};
    for(i=0;i<10;i++)
    {
        cout<<a[i]<<" ";
    }
	cout<<endl;
	cout<<endl;

    int arr[20] = { 12, 16, 20, 40, 50, 70 };
    int size = sizeof(arr) / sizeof(arr[0]);
     n = 6;
   int key = 26;
 
    cout << " Before Insertion: ";
    for (i = 0; i < n; i++)
        cout << arr[i] << " ";
    n = insertSorted(arr, n, key, size);
 
    cout << " After Insertion: ";
    for (i = 0; i < n; i++)
        cout << arr[i] << " ";

		cout<<endl;
		cout<<endl;

    int b[100],x,m;
	printf("enter the number of elements \n");
	scanf("%d",&n);
	printf("enter the elements \n");
	for(i=0;i<n;i++)
	{
	scanf("%d",&b[i]);
	} 
	printf("enter the position at which u want to add the element \n");
	scanf("%d",&x);
	printf("enter the element to be added \n");
	scanf("%d",&m);
	for(int j=n;j>=x;j--)
	{
	    b[j]=b[j-1];
	}
	b[x-1]=m;
	n++;
	int z=0;
	printf("new array \n");
	for(z=0;z<n;z++)
	{
	    printf(" %d ",b[z]);
	}

	cout<<endl;
	cout<<endl;

	int elem, j, found=0;
	cout<<"Enter the size of array"<<endl;
	cin>>n;
    cout<<"Enter Array Elements: ";
    for(i=0; i<n; i++)
        cin>>b[i];
    cout<<"\nEnter Element to Delete: ";
    cin>>elem;
    for(i=0; i<n; i++)
    {
        if(b[i]==elem)
        {
            for(j=i; j<(n-1); j++)
                b[j] = b[j+1];
            found++;
            i--;
            n--;
        }
    }
    if(found==0)
        cout<<"\nElement doesn't found in the Array!";
    else
        cout<<"\nElement Deleted Successfully!";
    cout<<endl;
	for(i=0;i<n;i++)
	cout<<b[i];
	cout<<endl;
	cout<<endl;
	findMissing(arr,n);
	cout<<endl;
	cout<<endl;
	 count_element_in_array(b,size);
	 cout<<endl;
	 cout<<endl;
        j=m-1;
        i=0;
        while(i<j)
        {
        int temp;
        temp=b[i];
        b[i]=b[j];
        b[j]=temp;
        i++;
        j--;
        }
        cout<<"Reversed array is:"<<endl;
        for(i=0;i<m;i++)
        {
            cout<<b[i];
        }
    
	return 0;
    
}
/******************************************************************************************************************/
//LAB2(array)
#include<iostream>
using namespace std;
void mergeArrays(int arr1[], int arr2[], int n1,
                             int n2, int arr3[])
{
    int i = 0, j = 0, k = 0;
 
 
    while (i<n1 && j <n2)
    {
      
        if (arr1[i] < arr2[j])
            arr3[k++] = arr1[i++];
        else
            arr3[k++] = arr2[j++];
    }
 
    
    while (i < n1)
        arr3[k++] = arr1[i++];
 
    while (j < n2)
        arr3[k++] = arr2[j++];
}
void set_union(int arr1[], int arr2[], int n1,
                             int n2, int arr3[])
                             {
                                int i = 0, j = 0, k = 0;
 
 
    while (i<n1 && j <n2)
    {
      
        if (arr1[i] < arr2[j])
            arr3[k++] = arr1[i++];
        else if(arr1[i]>arr2[j])
            arr3[k++] = arr2[j++];
            else{
            arr3[k]=arr1[i];
            k++;
            j++;
            i++;
            }
    }
 
    
    while (i < n1)
        arr3[k++] = arr1[i++];
 
    while (j < n2)
        arr3[k++] = arr2[j++];
}
void intersection(int arr1[], int arr2[], int n1,
                             int n2, int arr3[])
    {
        int i = 0, j = 0, k = 0;
 
 
    while (i<n1 && j <n2)
    {
      
        if (arr1[i] < arr2[j])
            arr3[k++] = arr1[i++];
        else if(arr1[i]>arr2[j])
            arr3[k++] = arr2[j++];
            else{
            k++;
            j++;
            i++;
            }
    }
 
    
    while (i < n1)
        arr3[k++] = arr1[i++];
 
    while (j < n2)
        arr3[k++] = arr2[j++];
 }

void set_difference(int arr1[], int arr2[], int n1,
                             int n2, int arr3[])
                             {
int i = 0, j = 0, k = 0;
while (i<n1 && j <n2)
    {
      
        if (arr1[i] < arr2[j])
            arr3[k++] = arr1[i++];
        else if(arr1[i]>arr2[j])
            j++;
            else{
            j++;
            i++;
            }
    }
 
    
    while (i < n1)
        arr3[k++] = arr1[i++];
 
    while (j < n2)
        arr3[k++] = arr2[j++];
 }
    void print(int a[],int size)


{
    printf("\nARRAY ELEMENT:\n");
    for(int i=0;i<size;i++)
    {
        printf(" %d ",a[i]);
    }
    printf("\n");
}
int initialization(int a[])
{
    int size;
    printf("\nENTER THE SIZE OF ARRAY:");
    scanf("%d",&size);
    printf("ENTER ELEMENTS:\n");
    for (int i=0;i<size;i++)
    {
        scanf("%d",&a[i]);
    }
    return size;
}

int symmetric_program(int a[],int b[],int size_a,int size_b,int work[])
{
    int i=0,j=0,index=0;
    while (i<size_a && j<size_b)
    {
        if (a[i]<b[j])
        {
            work[index++]=a[i++];
        }
        else if (a[i]>b[j])
        {
            work[index++]=b[j++];
        }
        else 
        {
            i++;
            j++;
        }
    }
    while (i<size_a)    work[index++]=a[i++];
    while (j<size_b)    work[index++]=b[j++];

    return index;
}
 
int main()
{
    int arr1[] = {1, 3, 5, 7};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
 
    int arr2[] = {2, 4, 6, 8};
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
 
    int arr3[n1+n2];
    mergeArrays(arr1, arr2, n1, n2, arr3);
 
    cout << "Array after merging" <<endl;
    for (int i=0; i < n1+n2; i++)
        cout << arr3[i] << " ";
        cout<<endl;
        cout<<endl;
        set_union(arr1,arr2,n1,n2,arr3);
        cout<<"Set union of array is"<<endl;
        for(int i=0;i<n1+n2;i++)
        cout<< arr3[i]<<" ";
         cout<<endl;
         cout<<endl;
        intersection(arr1,arr2,n1,n2,arr3);
        cout<<"Intersection of array is"<<endl;
        for(int i=0;i<n1+n2;i++)
        {
            cout<< arr3[i]<< " ";
        }
         cout<<endl;
         cout<<endl;
        set_difference(arr1,arr2,n1,n2,arr3);
        cout<<"Difference of array is"<<endl;
        for(int i=0;i<n1+n2;i++)
        {
            cout<< arr3[i]<< " ";
        }
         cout<<endl;
         cout<<endl;
        int a[100],b[100],size,ele,work[100],size_a,size_b;
    //?SYMMETRIC PROGRAM: common nhi aata hai 
    //A(-)B= (A-B) | (B-A)
    size_a=initialization(a);
    print(a,size_a);
    size_b=initialization(b);
    print(b,size_b);
    size=symmetric_program(a,b,size_a,size_b,work);
    print(work,size);
    return 0;
}
/************************************************************************************************************/
//LAB3(ARRAY)
#include<iostream>
#define size 5
using namespace std;
void matrixaddition(int a[50][50],int b[50][50],int c[50][50],int m,int n,int p,int q)
{
 if(m==p && n==q)
    {
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                c[i][j]=a[i][j] + b[i][j];
            }
        }
    }
}
void matrixsub(int a[50][50],int b[50][50],int c[50][50],int m,int n,int p,int q)
{
 if(m==p && n==q)
    {
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                c[i][j]=a[i][j] - b[i][j];
            }
        }
    }
}
void matrixmul(int a[50][50],int b[50][50],int c[50][50],int m,int n,int p,int q)
{
    int i,j,k;
    for(i=0;i<m;i++)
    {
        for(j=0;j<q;j++)
        {
            c[i][j]=0;
        
        for(k=0;k<p;k++)
        {
            c[i][j]+= a[i][k] * b[k][j];
        }
        cout<<c[i][j]<<" ";
        }
        cout<<endl;
    }
}
void matrixtranspose(int a[50][50],int transpose[50][50],int m,int n)
{
    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
      {
         transpose[i][j] = a[j][i];
      }

   cout << "\nTranspose of Matrix: " << endl;
   for (int i = 0; i < n; ++i)
      for (int j = 0; j < m; ++j)
      {
         cout << " " << transpose[i][j];
         if (j == m - 1)
            cout << endl
                 << endl;
      }

}
void initialisation(int a[][size],int row,int col)
{
    
    printf("\n\n");
    printf("ENTER ELEMENTS OF ARRAY:\n");
    for (int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    
}
void print(int a[][size], int row, int col)
{
    int i, j, l;
    printf("\n\n------");
    for (l = 1; l < col; l++)
    {
        printf("-----");
    }
    for (i = 0; i < row; i++)
    {
        printf("\n|");
        for (j = 0; j < col; j++)
        {
            printf("%-2d  |", a[i][j]);
        }
        printf("\n------");
        for (l = 1; l < col; l++)
        {
            printf("-----");
        }
    }
}

void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
void transpose2(int a[][size],int row,int col)
{
    int i,j;
    for (i=0;i<row;i++)
    {
        for(j=0;j<col;j++)
        {
            if (i+j<i+i)
                swap(&a[j][i],&a[i][j]);
        }
    }
}

int main()
{
    int i,j,m,n,p,q;
    int a[50][50];
    int b[50][50];
    int c[50][50];
    int transpose[50][50];
    cout<<"Enter the no of rows of 1st array"<<endl;
    cin>>m;
    cout<<endl;
    cout<<"Enter the no of columns of 1st array"<<endl;
    cin>>n;
    cout<<endl;
    cout<<"Enter the no of rows of 2nd array"<<endl;
    cin>>p;
    cout<<endl;
    cout<<"Enter the no of columns of 2nd array"<<endl;
    cin>>q;
    cout<<endl;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cin>>a[i][j];
        }
    }
    for(i=0;i<p;i++)
    {
        for(j=0;j<q;j++)
        cin>>b[i][j];
    }
    cout<<endl;
    cout<<endl;
matrixaddition(a,b,c,m,n,p,q);
 for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<c[i][j]<<" ";
        }
        cout<<endl;
    }
        cout<<endl;
        cout<<endl;
    matrixsub(a,b,c,m,n,p,q);
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<c[i][j]<<" ";
        }
        cout<<endl;
    }
        cout<<endl;
        cout<<endl;
    matrixmul(a,b,c,m,n,p,q);
    cout<<endl;
    cout<<endl;
    matrixtranspose(a,transpose,m,n);
    cout<<endl;
    cout<<endl;
    int d[size][size],row,col;
    printf("ENTER NUMBER OF ROWS:");
    scanf("%d",&row);
    printf("ENTER NUMBER OF COLUMNS:");
    scanf("%d",&col);
    initialisation(d,row,col);

    printf("ENTERED ELEMENTS:");
    print(d,row,col);

    transpose2(d,row,col);
    printf("\n\nMATRIX AFTER TRANSPOSE: ");
    print(d,col,row);
    return 0;
}
/**********************************************************************************************************/
// ADDRESS CALCULATION 1-D
#include <stdio.h>
int main()
{
    int j, i, k, n, m, o;
    printf("ENTER THE SIZE OF THE ARRAY\n");
    scanf("%d", &n);
    int a1[n];
    printf("ADDRESS CALCULATION FOR 1-D ARRAY\n");
    printf("ENTER THE ELEMENTS FOR THE 1-D ARRAY\n");
    for (i = 0; i < n; i++)
    {
        scanf("%d", &a1[i]);
    }
    for (i = 0; i < n; i++)
    {
        printf("%d = %d\n", a1[i], &a1[i]);
    }
    for (i = 0; i < n; i++)
    {
        int *add = (int)&a1[0] + sizeof(int) * (a1[i] - 1);
        printf("ADDRESS OF VALUE %d AT INDEX %d IS %d\n", a1[i], i, add);
    }
   
}
// ADDRESS CALCULATION 2-D
 #include <stdio.h>
int main()
{
    int j, i, k, n, m, o;
 printf("ENTER THE ROWS AND COLUMN OF THE 2-D ARRAY\n");
    scanf("%d%d", &m, &n);
    int a2[m][n];
    printf("ENTER THE ELEMENTS OF 2-D ARRAY\n");
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            scanf("%d", &a2[i][j]);
        }
    }
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            printf("%d = %d\n", a2[i][j], &a2[i][j]);
        }
    }
    printf("ROW MAJOR ADDRESS CALCULATION FOR 2-D ARRAY\n");
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            int *add = (int)&a2[0][0] + sizeof(int) * ((i)*n + (j));
            printf("ADDRESS OF VALUE %d AT INDEX [%d][%d] IS %d\n", a2[i][j], i, j, add);
        }
    }
    printf("COLUMN MAJOR ADDRESS CALCULATION FOR 2D ARRAY\n");
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            int *add = (int)&a2[0][0] + sizeof(int) * ((j)*m + (i));
            printf("ADDRESS OF VALUE %d AT INDEX [%d][%d] IS %d\n", a2[i][j], i, j, add);
        }
    }
}

// ADDRESS CALCULATION 3-D
 #include <stdio.h>
int main()
{
    int j, i, k, n, m, o;
    printf("ENTER THE ROWS COLUMNS AND WIDHT SIZE OF 3-D ARRAY\n");
    scanf("%d%d%d", &m, &n, &o);
    int a3[m][n][o];
    printf("ENTER THE ELEMENTS OF THE 3-D ARRAY");
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            for (k = 0; k < o; k++)
                scanf("%d", &a3[i][j][k]);
        }
    }
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            for (k = 0; k < o; k++)
                printf("%d = %d\n", a3[i][j][k], &a3[i][j][k]);
        }
    }
    printf("\nROW MAJOR ADDRESS CALCULATION FOR 3-D ARRAY\n");
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            for (k = 0; k < o; k++)
            {
                int *add = (int)&a3[0][0][0] + sizeof(int) * (m * n * i + n * j + k);
                printf("ADDRESS OF VALUE %d AT INDEX [%d][%d][%d] IS %d\n", a3[i][j], i, j, k, add);
            }
        }
    }
    printf("COLUMN MAJOR ADDRESS CALCULATION FOR 3-D ARRAY\n");
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            for (k = 0; k < o; k++)
            {
                int *add = (int)&a3[0][0][0] + sizeof(int) * (m * n * i + m * k + j);
                printf("ADDRESS OF VALUE %d AT INDEX [%d][%d][%d] IS %d\n", a3[i][j], i, j, k, add);
            }
        }
    }
}

